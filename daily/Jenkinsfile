pipeline {
    agent any
    /*triggers {
        cron '''TZ=America/Chicago
            * * * * *'''
    }*/
    parameters {
        choice(choices: ['one', 'two'], description: 'Select an option', name: 'OPTION')
    }
    environment {
        BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].userId ?: 'SYSTEM'}"
    }
    stages {
        stage('testing') {
            steps {
                script {
                    try {
                        echo "${BUILD_TRIGGER_BY}"
                    } catch (Exception e) {
                        echo "Error: ${e.getMessage()}"
                    }
                }
            }
        }
        stage('triggered by user') {
            when {
                expression { BUILD_TRIGGER_BY != 'SYSTEM' }
            }
            steps {
                script {
                    try {
                        def jsonPath = 'daily/daily.json'
                        echo "Reading JSON file at: ${jsonPath}"

                        def jsonContent = readFile(jsonPath)
                        echo "JSON Content: ${jsonContent}"

                        try {
                            def json = new groovy.json.JsonSlurper().parseText(jsonContent)
                            echo "Parsed JSON: ${json}"
                            try {
                                if (!json.jobs || json.jobs.isEmpty()) {
                                    error "No jobs found in JSON."
                                }
                                echo "json is valid and parsed successfully."
                                try {
                                    echo "processing jobs: ${params.OPTION}"
                                    def selectedJob = json.jobs.find { it.name == params.OPTION }
                                    if (!selectedJob) {
                                        error "Job '${params.OPTION}' not found in JSON."
                                    }
                                    try {
                                        echo "Found job: ${selectedJob}"

                                        // ---- Build clean databound maps (NOT steps, NOT JSON maps) ----
                                        def raw = [:]
                                        (selectedJob.parameters ?: []).each { kv ->
                                            raw[(kv.name as String)] = (kv.value == null ? '' : kv.value.toString())
                                        }

                                        // Construct exact ParameterValue databound maps
                                        def jenkinsParams = []
                                        jenkinsParams << [$class: 'StringParameterValue', name: 'PARAM1', value: (raw.PARAM1 ?: '')]
                                        jenkinsParams << [$class: 'StringParameterValue', name: 'PARAM2', value: (raw.PARAM2 ?: '')]
                                        jenkinsParams << [$class: 'StringParameterValue', name: 'PARAM3', value: (raw.PARAM3 ?: '')]
                                        jenkinsParams << [$class: 'StringParameterValue', name: 'PARAM4', value: (raw.PARAM4 ?: '')]
                                        // ----------------------------------------------------------------

                                        // IMPORTANT: use the real Jenkins job full name
                                        def jobName = 'optimized/queue'
                                        echo "Triggering job '${jobName}' with parameters: ${jenkinsParams}"

                                        try {
                                            build wait: true, job: jobName, parameters: jenkinsParams
                                        } catch (Exception e) {
                                            error "Failed to trigger job '${selectedJob.job}': ${e.getMessage()}"
                                        }

                                    } catch (Exception e) {
                                        error "Error processing selected job: ${e.getMessage()}"
                                    }
                                } catch (Exception e) {
                                    error "Error finding selected job: ${e.getMessage()}"
                                }
                            } catch (Exception e) {
                                error "Error parsing JSON content: ${e.getMessage()}"
                            }
                        } catch (Exception e) {
                            error "Error reading JSON file: ${e.getMessage()}"
                        }
                    } catch (Exception e) {
                        error "Unexpected error (must be the path): ${e.getMessage()}"
                    }
                }
            }
        }
    }
}

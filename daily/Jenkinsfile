pipeline {
    agent any
    /*triggers {
        cron '''TZ=America/Chicago
            * * * * *'''
    }*/
    parameters {
        choice(choices: ['one', 'two'], description: 'Select an option', name: 'OPTION')
    }
    environment {
        BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].userId ?: 'SYSTEM'}"
    }
    stages {
        stage('testing') {
            steps {
                script {
                    try {
                        echo "${BUILD_TRIGGER_BY}"
                    } catch (Exception e) {
                        echo "Error: ${e.getMessage()}"
                    }
                }
            }
        }
        stage('triggered by user') {
            when {
                expression { BUILD_TRIGGER_BY != 'SYSTEM' }
            }
            steps {
                script {
                    try {
                        def jsonPath = 'daily/daily.json'
                        echo "Reading JSON file at: ${jsonPath}"

                        def jsonContent = readFile(jsonPath)
                        echo "JSON Content: ${jsonContent}"

                        try {
                            def json = new groovy.json.JsonSlurper().parseText(jsonContent)
                            echo "Parsed JSON: ${json}"
                            try {
                                if (!json.jobs || json.jobs.isEmpty()) {
                                    error "No jobs found in JSON."
                                }
                                echo "json is valid and parsed successfully."
                                try {
                                    echo "processing jobs: ${params.OPTION}"
                                    def selectedJob = json.jobs.find { it.name == params.OPTION }
                                    if (!selectedJob) {
                                        error "Job '${params.OPTION}' not found in JSON."
                                    }
                                    try {
                                        echo "Found job: ${selectedJob}"

                                        // ---- Cross-platform param wash (Windows: PowerShell, *nix: sh) ----
                                        // 1) Flatten JSON params into plain strings first
                                        def raw = [:]
                                        (selectedJob.parameters ?: []).each { kv ->
                                            raw[(kv.name as String)] = (kv.value == null ? '' : kv.value.toString())
                                        }

                                        def washed = [:]
                                        def keys = ['PARAM1','PARAM2','PARAM3','PARAM4']
                                        if (isUnix()) {
                                            keys.each { k ->
                                                def val = (raw[k] ?: '')
                                                // escape double-quotes for sh
                                                def safe = val.replaceAll('"', '\\\\\"')
                                                washed[k] = sh(script: "printf '%s' \"${safe}\"", returnStdout: true).trim()
                                            }
                                        } else {
                                            // Windows: PowerShell here-string; escape single quotes inside value
                                            keys.each { k ->
                                                def val = (raw[k] ?: '')
                                                def valEsc = val.replace("'", "''")
                                                // IMPORTANT: use $$ to emit a literal $ in a GString
                                                def ps = "\$${'ErrorActionPreference'}='Stop'; " +
                                                         "\$${'v'}=@'\n${valEsc}\n'@; " +
                                                         "[Console]::Write(\$${'v'})"
                                                washed[k] = bat(
                                                    script: """powershell -NoProfile -Command "${ps}"""",
                                                    returnStdout: true
                                                ).trim()
                                            }
                                        }

                                        // 2) Build literal list of parameter step calls (no collect/closures)
                                        def jenkinsParams = [
                                            string(name: 'PARAM1', value: washed.PARAM1 ?: ''),
                                            string(name: 'PARAM2', value: washed.PARAM2 ?: ''),
                                            string(name: 'PARAM3', value: washed.PARAM3 ?: ''),
                                            string(name: 'PARAM4', value: washed.PARAM4 ?: '')
                                        ]
                                        // -------------------------------------------------------------------

                                        echo "Triggering job 'optimized/queue' with parameters: ${jenkinsParams}"

                                        try {
                                            build wait: true, job: 'optimized/queue', parameters: jenkinsParams
                                        } catch (Exception e) {
                                            error "Failed to trigger job '${selectedJob.job}': ${e.getMessage()}"
                                        }

                                    } catch (Exception e) {
                                        error "Error processing selected job: ${e.getMessage()}"
                                    }
                                } catch (Exception e) {
                                    error "Error finding selected job: ${e.getMessage()}"
                                }
                            } catch (Exception e) {
                                error "Error parsing JSON content: ${e.getMessage()}"
                            }
                        } catch (Exception e) {
                            error "Error reading JSON file: ${e.getMessage()}"
                        }
                    } catch (Exception e) {
                        error "Unexpected error (must be the path): ${e.getMessage()}"
                    }
                }
            }
        }
    }
}

// (Optional) If you later want a helper, make it accept the whole selectedJob object:
// def params_helper(def selectedJob) { ... }

pipeline {
    agent any

    parameters {
        choice(name: 'OPTION', choices: ['one', 'two'], description: 'Select an option')
    }

    environment {
        BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].userId ?: 'SYSTEM'}"
    }

    stages {
        stage('testing') {
            steps {
                echo "${BUILD_TRIGGER_BY}"
            }
        }

        stage('triggered by user') {
            when { expression { BUILD_TRIGGER_BY != 'SYSTEM' } }
            steps {
                script {
                    def jsonPath = 'daily/daily.json'
                    echo "Reading JSON file at: ${jsonPath}"

                    def jsonContent = readFile(jsonPath)
                    echo "JSON Content: ${jsonContent}"

                    // Parse JSON (JsonSlurper returns LazyMap), then sanitize to plain maps/lists
                    def parsed = new groovy.json.JsonSlurper().parseText(jsonContent)
                    def json = toPlain(parsed)
                    echo "Parsed JSON (plain): ${json}"

                    if (!json.jobs || !(json.jobs instanceof List) || json.jobs.isEmpty()) {
                        error "No jobs found in JSON."
                    }

                    echo "processing jobs: ${params.OPTION}"
                    def selectedJob = json.jobs.find { it.name == params.OPTION }
                    if (!selectedJob) {
                        error "Job '${params.OPTION}' not found in JSON."
                    }

                    echo "Found job: ${selectedJob}"

                    // Build simple name->value (Strings only)
                    def raw = [:]
                    (selectedJob.parameters ?: []).each { kv ->
                        def key = kv?.name == null ? '' : kv.name.toString()
                        def val = kv?.value == null ? '' : kv.value.toString()
                        raw[key] = val
                    }

                    // Literal list of parameter steps (avoid closures/collect)
                    def jenkinsParams = [
                        string(name: 'PARAM1', value: raw['PARAM1'] ?: ''),
                        string(name: 'PARAM2', value: raw['PARAM2'] ?: ''),
                        string(name: 'PARAM3', value: raw['PARAM3'] ?: ''),
                        string(name: 'PARAM4', value: raw['PARAM4'] ?: '')
                    ]

                    // Use the actual Jenkins job full name (folder path), not a repo path
                    def jobName = 'optimized/queue'
                    echo "Triggering job '${jobName}' with parameters: ${jenkinsParams}"

                    // Wait for downstream; if it fails, bubble the error up
                    build job: jobName, wait: true, propagate: true, parameters: jenkinsParams
                }
            }
        }
    }
}

// Recursively convert JsonSlurper results (LazyMap/LazyList) into plain collections using only literals
@NonCPS
def toPlain(Object o) {
    if (o instanceof Map) {
        def m = [:]
        o.each { k, v -> m[(k == null ? null : k.toString())] = toPlain(v) }
        return m
    } else if (o instanceof List) {
        def l = []
        o.each { v -> l << toPlain(v) }
        return l
    } else {
        return o
    }
}

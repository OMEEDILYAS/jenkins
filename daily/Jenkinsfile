pipeline {
    agent any

    parameters {
        choice(name: 'OPTION', choices: ['one', 'two'], description: 'Select an option')
    }

    environment {
        BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].userId ?: 'SYSTEM'}"
    }

    stages {
        stage('testing') {
            steps { echo "${BUILD_TRIGGER_BY}" }
        }

        stage('triggered by user') {
            when { expression { BUILD_TRIGGER_BY != 'SYSTEM' } }
            steps {
                script {
                    def jsonPath = 'daily/daily.json'
                    echo "Reading JSON file at: ${jsonPath}"

                    def jsonContent = readFile(jsonPath)
                    // Parse+sanitize entirely in @NonCPS; no LazyMap leaks into CPS
                    def raw = extractParams(jsonContent, params.OPTION)
                    if (raw == null) {
                        error "Job '${params.OPTION}' not found in JSON."
                    }

                    // Build literal parameter steps from plain strings
                    def jenkinsParams = [
                        string(name: 'PARAM1', value: raw['PARAM1'] ?: ''),
                        string(name: 'PARAM2', value: raw['PARAM2'] ?: ''),
                        string(name: 'PARAM3', value: raw['PARAM3'] ?: ''),
                        string(name: 'PARAM4', value: raw['PARAM4'] ?: '')
                    ]

                    def jobName = 'optimized/queue'  // Jenkins job full name
                    echo "Triggering job '${jobName}' with parameters: ${jenkinsParams}"

                    // Wait and propagate result
                    build job: jobName, wait: true, propagate: true, parameters: jenkinsParams
                }
            }
        }
    }
}

/** Parse JSON and return a plain String map of PARAM1..4 for the selected job. */
@NonCPS
def extractParams(String jsonText, String optionName) {
    def parsed = new groovy.json.JsonSlurper().parseText(jsonText)  // LazyMap
    def j = toPlain(parsed)  // convert to plain java.util collections
    if (!(j.jobs instanceof List) || j.jobs.isEmpty()) return null
    def selected = j.jobs.find { it.name?.toString() == optionName?.toString() }
    if (!selected) return null

    def out = [:]
    (selected.parameters ?: []).each { kv ->
        def key = kv?.name?.toString()
        if (key) out[key] = kv?.value == null ? '' : kv.value.toString()
    }
    return out
}

/** Deep-convert LazyMap/LazyList -> plain Map/List using literals only (no constructors). */
@NonCPS
def toPlain(Object o) {
    if (o instanceof Map) {
        def m = [:]
        o.each { k, v -> m[(k == null ? null : k.toString())] = toPlain(v) }
        return m
    } else if (o instanceof List) {
        def l = []
        o.each { v -> l << toPlain(v) }
        return l
    } else {
        return o
    }
}
